import type { VNode, SlotsType, PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: PropType<"sm" | "md" | "xs" | "2xs" | "lg" | "xl" | "2xl">;
        default: () => any;
        validator(value: string): boolean;
    };
    indicator: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: () => any;
    };
    class: {
        type: PropType<any>;
        default: () => "";
    };
    ui: {
        type: PropType<any>;
        default: () => {};
    };
}, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: PropType<"sm" | "md" | "xs" | "2xs" | "lg" | "xl" | "2xl">;
        default: () => any;
        validator(value: string): boolean;
    };
    indicator: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: () => any;
    };
    class: {
        type: PropType<any>;
        default: () => "";
    };
    ui: {
        type: PropType<any>;
        default: () => {};
    };
}>>, {
    size: "sm" | "md" | "xs" | "2xs" | "lg" | "xl" | "2xl";
    ui: any;
    icon: string;
    class: any;
    max: number;
    min: number;
    indicator: boolean;
}, SlotsType<{
    default?: any[] | undefined;
    indicator?: {
        percent: number;
    } | undefined;
}>>;
export default _default;
